package com.gaskarov.teerain.resource;

import static com.gaskarov.teerain.resource.Settings.TILE_H;
import static com.gaskarov.teerain.resource.Settings.TILE_W;

/**
 * Copyright (c) 2016 Ayrat Gaskarov <br>
 * All rights reserved.
 * 
 * @author Ayrat Gaskarov
 */
public class Cells {

	// ===========================================================
	// Constants
	// ===========================================================

	public static final int CELL_TYPES_MAX_LOG = 16;
	public static final int CELL_TYPES_MAX = 1 << CELL_TYPES_MAX_LOG;
	public static final int CELL_TYPES_MAX_MASK = CELL_TYPES_MAX - 1;

	public static final int CELL_TYPES = 35;

	public static final int CELL_TYPE_DEFAULT = 0;
	public static final int CELL_TYPE_VOID = 1;
	public static final int CELL_TYPE_VACUUM = 2;
	public static final int CELL_TYPE_AIR = 3;
	public static final int CELL_TYPE_GROUND = 4;
	public static final int CELL_TYPE_STONE = 5;
	public static final int CELL_TYPE_OVERSTONE = 6;
	public static final int CELL_TYPE_SACREDSTONE = 7;
	public static final int CELL_TYPE_FINALSTONE = 8;
	public static final int CELL_TYPE_SAND = 9;
	public static final int CELL_TYPE_DIAMOND_BLOCK = 10;
	public static final int CELL_TYPE_IRON_BLOCK = 11;
	public static final int CELL_TYPE_GOLD_BLOCK = 12;
	public static final int CELL_TYPE_COAL_BLOCK = 13;
	public static final int CELL_TYPE_COPPER_BLOCK = 14;
	public static final int CELL_TYPE_TIN_BLOCK = 15;
	public static final int CELL_TYPE_URANIUM_BLOCK = 16;
	public static final int CELL_TYPE_GRAVITON_BLOCK = 17;
	public static final int CELL_TYPE_DARK_ENERGY_BLOCK = 18;
	public static final int CELL_TYPE_SPATIAL_RIFT_BLOCK = 19;
	public static final int CELL_TYPE_ELECTRON_BLOCK = 20;
	public static final int CELL_TYPE_GLASS = 21;
	public static final int CELL_TYPE_SILVER_BLOCK = 22;
	public static final int CELL_TYPE_LEAVES = 23;
	public static final int CELL_TYPE_WOOD = 24;
	public static final int CELL_TYPE_LAMP = 25;
	public static final int CELL_TYPE_TEE = 26;
	public static final int CELL_TYPE_UI = 27;
	public static final int CELL_TYPE_HAMMER = 28;
	public static final int CELL_TYPE_GRENADE_GUN = 29;
	public static final int CELL_TYPE_GRASS = 30;
	public static final int CELL_TYPE_INVENTORY = 31;
	public static final int CELL_TYPE_LOOT = 32;
	public static final int CELL_TYPE_SAPLING = 33;
	public static final int CELL_TYPE_TEE_ZOMBIE = 34;

	public static final int INVENTORY_PARAM_NO = 0;
	public static final int INVENTORY_PARAM_SPECIAL_ITEM = 1;
	public static final int INVENTORY_PARAM_USE_ITEM_MIN = 2;
	public static final int INVENTORY_PARAM_USE_ITEM_MAX = 10;
	public static final int INVENTORY_PARAM_ARMOR_ITEM = 11;
	public static final int INVENTORY_PARAM_FOOT_ARMOR_ITEM = 12;
	public static final int INVENTORY_PARAM_HAND_ARMOR_ITEM = 13;
	public static final int INVENTORY_PARAM_CRAFT_ITEM_MIN = 14;
	public static final int INVENTORY_PARAM_CRAFT_ITEM_MAX = 17;
	public static final int INVENTORY_PARAM_CRAFT_OUT_ITEM_MIN = 18;
	public static final int INVENTORY_PARAM_CRAFT_OUT_ITEM_MAX = 19;
	public static final int INVENTORY_PARAM_SELECT_ITEM = 20;
	public static final int INVENTORY_PARAM_INVENTORY_ITEM_MIN = 21;
	public static final int INVENTORY_PARAM_INVENTORY_ITEM_MAX = 38;

	public static final int CELL_RENDER_TYPE_NO = 0;
	public static final int CELL_RENDER_TYPE_TILE = 1;
	public static final int CELL_RENDER_TYPE_WALL = 2;
	public static final int CELL_RENDER_TYPE_TEE = 3;
	public static final int CELL_RENDER_TYPE_UI = 4;
	public static final int CELL_RENDER_TYPE_INVENTORY = 5;
	public static final int CELL_RENDER_TYPE_LOOT = 6;

	public static final int CELL_RENDER_LAYER_BACKGROUND = 3;
	public static final int CELL_RENDER_LAYER_MAIN = 2;
	public static final int CELL_RENDER_LAYER_FRONT = 1;
	public static final int CELL_RENDER_LAYER_SPECIAL = 0;

	public static final int CELL_RENDER_WEAPON_TYPE_NO = 0;
	public static final int CELL_RENDER_WEAPON_TYPE_DEFAULT = 1;
	public static final int CELL_RENDER_WEAPON_TYPE_SPECIAL = 2;

	public static final int CELL_RENDER_ITEM_TYPE_NO = 0;
	public static final int CELL_RENDER_ITEM_TYPE_DEFAULT = 1;

	public static final int CELL_TILE_CONNECTED_TYPE_NO = 0;
	public static final int CELL_TILE_CONNECTED_TYPE_SAME = 1;

	public static final int CELL_CONNECTION_TYPE_NO = 0;
	public static final int CELL_CONNECTION_TYPE_ALL = 1;
	public static final int CELL_CONNECTION_TYPE_BOTTOM = 2;
	public static final int CELL_CONNECTION_TYPE_FILTER = 3;

	public static final int CELL_PHYSICS_TYPE_NO = 0;
	public static final int CELL_PHYSICS_TYPE_WALL = 1;

	public static final float CELL_PHYSICS_BORDER_SIZE_AIR = 0f;
	public static final float CELL_PHYSICS_CORNER_SIZE_AIR = 0f;
	public static final float CELL_PHYSICS_CORNER_VALUE_AIR = 0f;
	public static final float CELL_PHYSICS_BORDER_SIZE_SOLID = 0.02f;
	public static final float CELL_PHYSICS_CORNER_SIZE_SOLID = 0.1f;
	public static final float CELL_PHYSICS_CORNER_VALUE_SOLID = 0.01f;
	public static final float CELL_PHYSICS_BORDER_SIZE_TEE = 0.02f;
	public static final float CELL_PHYSICS_CORNER_SIZE_TEE = 0.3f;
	public static final float CELL_PHYSICS_CORNER_VALUE_TEE = 0.125f;

	public static final float CELL_PHYSICS_DENSITY_AIR = 0f;
	public static final float CELL_PHYSICS_FRICTION_AIR = 0f;
	public static final float CELL_PHYSICS_RESTITUTION_AIR = 0f;
	public static final float CELL_PHYSICS_DENSITY_SOLID = 1f;
	public static final float CELL_PHYSICS_FRICTION_SOLID = 0.6f;
	public static final float CELL_PHYSICS_RESTITUTION_SOLID = 0f;
	public static final float CELL_PHYSICS_DENSITY_TEE = 1f;
	public static final float CELL_PHYSICS_FRICTION_TEE = 0f;
	public static final float CELL_PHYSICS_RESTITUTION_TEE = 0f;

	public static final int CELL_PHYSICS_COLLISION_TYPE_NO = 0;
	public static final int CELL_PHYSICS_COLLISION_TYPE_DEFAULT = 1;
	public static final int CELL_PHYSICS_COLLISION_TYPE_TEE = 2;

	public static final int CELL_LIGHT_SOURCE_NO_R = 0;
	public static final int CELL_LIGHT_SOURCE_NO_G = 0;
	public static final int CELL_LIGHT_SOURCE_NO_B = 0;
	public static final int CELL_LIGHT_SOURCE_TORCH_R = 192;
	public static final int CELL_LIGHT_SOURCE_TORCH_G = 128;
	public static final int CELL_LIGHT_SOURCE_TORCH_B = 96;
	public static final int CELL_LIGHT_SOURCE_MAGIC_R = 64;
	public static final int CELL_LIGHT_SOURCE_MAGIC_G = 192;
	public static final int CELL_LIGHT_SOURCE_MAGIC_B = 256;

	public static final int[] NO_LIGHT_RESISTANCE = new int[] { 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0 };

	public static final int[] AIR_LIGHT_RESISTANCE = new int[] { 16, 16, 16,
			16, 16, 16, 32, 32, 32, 16, 16, 16, 16, 16, 16, 0, 0, 0, 24, 24,
			24, 24, 24, 24, 24, 24, 24, 24, 24, 24 };

	public static final int[] SOLID_LIGHT_RESISTANCE = new int[] { 32, 32, 32,
			32, 32, 32, 64, 64, 64, 32, 32, 32, 32, 32, 32, 1024, 1024, 1024,
			48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48 };

	public static final int[] STONE_LIGHT_RESISTANCE = new int[] { 64, 64, 64,
			64, 64, 64, 128, 128, 128, 64, 64, 64, 64, 64, 64, 1024, 1024,
			1024, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96 };

	public static final int[] OVERSTONE_LIGHT_RESISTANCE = new int[] { 128,
			128, 128, 128, 128, 128, 256, 256, 256, 128, 128, 128, 128, 128,
			128, 1024, 1024, 1024, 192, 192, 192, 192, 192, 192, 192, 192, 192,
			192, 192, 192 };

	public static final int[] SACREDSTONE_LIGHT_RESISTANCE = new int[] { 256,
			256, 256, 256, 256, 256, 512, 512, 512, 256, 256, 256, 256, 256,
			256, 1024, 1024, 1024, 384, 384, 384, 384, 384, 384, 384, 384, 384,
			384, 384, 384 };

	public static final int[] FINALSTONE_LIGHT_RESISTANCE = new int[] { 1024,
			1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
			1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
			1024, 1024, 1024, 1024, 1024, 1024, 1024 };

	public static final int[] LEAVES_LIGHT_RESISTANCE = new int[] { 32, 16, 32,
			32, 16, 32, 64, 32, 64, 32, 16, 32, 32, 16, 32, 64, 32, 64, 48, 24,
			48, 48, 24, 48, 48, 24, 48, 48, 24, 48 };

	public static final int CELL_AI_RESISTANCE_AIR = 2;
	public static final int CELL_AI_DIAGONAL_RESISTANCE_AIR = 3;
	public static final int CELL_AI_RESISTANCE_SOLID = 255;
	public static final int CELL_AI_DIAGONAL_RESISTANCE_SOLID = 255;

	public static final int CELL_ITEM_ACTION_NO = 0;
	public static final int CELL_ITEM_ACTION_DEFAULT = 1;
	public static final int CELL_ITEM_ACTION_HAMMER = 2;
	public static final int CELL_ITEM_ACTION_GUN = 3;

	public static final int CELL_DESTROY_ACTION_NO = 0;
	public static final int CELL_DESTROY_ACTION_DEFAULT = 1;
	public static final int CELL_DESTROY_ACTION_LOOT = 2;

	public static final int CELL_ITEM_STUCK_SIZE_DEFAULT = 64;

	public static final int[] CELLS_RENDER_TYPE = new int[CELL_TYPES];
	public static final float[][] CELLS_RENDER_TILE_DATA = new float[CELL_TYPES][];
	public static final int[] CELLS_RENDER_LAYER = new int[CELL_TYPES];
	public static final int[] CELLS_RENDER_WEAPON_TYPE = new int[CELL_TYPES];
	public static final float[][] CELLS_RENDER_WEAPON_DATA = new float[CELL_TYPES][];
	public static final int[] CELLS_RENDER_ITEM_TYPE = new int[CELL_TYPES];

	public static final boolean[] CELLS_TILE_CORNER_FIX = new boolean[CELL_TYPES];
	public static final int[] CELLS_TILE_CONNECTED_TYPE = new int[CELL_TYPES];

	public static final int[] CELLS_CONNECTION_TYPE = new int[CELL_TYPES];
	public static final int[][] CELLS_CONNECTION_FILTER = new int[CELL_TYPES][];
	public static final boolean[] CELLS_IS_DROPPABLE = new boolean[CELL_TYPES];

	public static final boolean[] CELLS_IS_SOLID = new boolean[CELL_TYPES];
	public static final boolean[] CELLS_IS_SQUARE = new boolean[CELL_TYPES];
	public static final boolean[] CELLS_IS_SHELLABLE = new boolean[CELL_TYPES];

	public static final boolean[] CELLS_IS_BLOCKING = new boolean[CELL_TYPES];

	public static final int[] CELLS_PHYSICS_TYPE = new int[CELL_TYPES];

	public static final float[] CELLS_PHYSICS_BORDER_SIZE = new float[CELL_TYPES];
	public static final float[] CELLS_PHYSICS_CORNER_SIZE = new float[CELL_TYPES];
	public static final float[] CELLS_PHYSICS_CORNER_VALUE = new float[CELL_TYPES];

	public static final float[] CELLS_PHYSICS_DENSITY = new float[CELL_TYPES];
	public static final float[] CELLS_PHYSICS_FRICTION = new float[CELL_TYPES];
	public static final float[] CELLS_PHYSICS_RESTITUTION = new float[CELL_TYPES];

	public static final int[] CELLS_PHYSICS_COLLISION_TYPE = new int[CELL_TYPES];

	public static final int[] CELLS_LIGHT_SOURCE_R = new int[CELL_TYPES];
	public static final int[] CELLS_LIGHT_SOURCE_G = new int[CELL_TYPES];
	public static final int[] CELLS_LIGHT_SOURCE_B = new int[CELL_TYPES];
	public static final boolean[] CELLS_IS_DYNAMIC_LIGHT_SOURCE = new boolean[CELL_TYPES];

	public static final int[][] CELLS_LIGHT_RESISTANCE = new int[CELL_TYPES][];

	public static final int[] CELLS_AI_RESISTANCE = new int[CELL_TYPES];
	public static final int[] CELLS_AI_DIAGONAL_RESISTANCE = new int[CELL_TYPES];

	public static final int[] CELLS_ITEM_ACTION = new int[CELL_TYPES];

	public static final int[] CELLS_DESTROY_ACTION = new int[CELL_TYPES];

	public static final int[] CELLS_ITEM_STUCK_SIZE = new int[CELL_TYPES];

	public static final boolean[] CELLS_TICK = new boolean[CELL_TYPES];

	public static final boolean[] CELLS_IS_TEE = new boolean[CELL_TYPES];

	public static final int SYMBOLS = 37;
	public static final float[] SYMBOLS_TILE_X = new float[SYMBOLS];
	public static final float[] SYMBOLS_TILE_Y = new float[SYMBOLS];

	// ===========================================================
	// Fields
	// ===========================================================

	// ===========================================================
	// Constructors
	// ===========================================================

	static {
		// 0-9
		for (int i = 0; i <= 9; ++i) {
			SYMBOLS_TILE_X[1 + i] = TILE_W * (6 + i);
			SYMBOLS_TILE_Y[1 + i] = TILE_H * 7;
		}
		// A-Z
		for (int i = 0; i < 26; ++i) {
			SYMBOLS_TILE_X[11 + i] = TILE_W * (6 + i % 10);
			SYMBOLS_TILE_Y[11 + i] = TILE_H * (8 + i / 10);
		}

		for (int i = 0; i < CELL_TYPES; ++i) {
			CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_NO;
			CELLS_RENDER_TILE_DATA[i] = null;
			CELLS_RENDER_LAYER[i] = CELL_RENDER_LAYER_MAIN;
			CELLS_RENDER_WEAPON_TYPE[i] = CELL_RENDER_WEAPON_TYPE_DEFAULT;
			CELLS_RENDER_WEAPON_DATA[i] = null;
			CELLS_RENDER_ITEM_TYPE[i] = CELL_RENDER_ITEM_TYPE_DEFAULT;
			CELLS_TILE_CORNER_FIX[i] = false;
			CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_NO;
			CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_NO;
			CELLS_IS_DROPPABLE[i] = false;
			CELLS_IS_SOLID[i] = false;
			CELLS_IS_SQUARE[i] = true;
			CELLS_IS_SHELLABLE[i] = false;
			CELLS_IS_BLOCKING[i] = false;
			CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_NO;
			CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_AIR;
			CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_AIR;
			CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_AIR;
			CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_AIR;
			CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_AIR;
			CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_AIR;
			CELLS_PHYSICS_COLLISION_TYPE[i] = CELL_PHYSICS_COLLISION_TYPE_NO;
			CELLS_LIGHT_SOURCE_R[i] = CELL_LIGHT_SOURCE_NO_R;
			CELLS_LIGHT_SOURCE_G[i] = CELL_LIGHT_SOURCE_NO_G;
			CELLS_LIGHT_SOURCE_B[i] = CELL_LIGHT_SOURCE_NO_B;
			CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = false;
			CELLS_LIGHT_RESISTANCE[i] = AIR_LIGHT_RESISTANCE;
			CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_AIR;
			CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_AIR;
			CELLS_ITEM_ACTION[i] = CELL_ITEM_ACTION_DEFAULT;
			CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_NO;
			CELLS_ITEM_STUCK_SIZE[i] = CELL_ITEM_STUCK_SIZE_DEFAULT;
			CELLS_TICK[i] = false;
			CELLS_IS_TEE[i] = false;
		}

		int i;

		// Void
		i = CELL_TYPE_VOID;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;

		// Vacuum
		i = CELL_TYPE_VACUUM;
		CELLS_ITEM_ACTION[i] = CELL_ITEM_ACTION_HAMMER;

		// Air
		i = CELL_TYPE_AIR;
		CELLS_LIGHT_RESISTANCE[i] = AIR_LIGHT_RESISTANCE;

		// Ground
		i = CELL_TYPE_GROUND;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 0,
				TILE_W * 1, TILE_H * 0, TILE_W * 2, TILE_H * 0, TILE_W * 3,
				TILE_H * 0, TILE_W * 4, TILE_H * 0, TILE_W * 5, TILE_H * 0 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Stone
		i = CELL_TYPE_STONE;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 1,
				TILE_W * 1, TILE_H * 1, TILE_W * 2, TILE_H * 1, TILE_W * 3,
				TILE_H * 1, TILE_W * 4, TILE_H * 1, TILE_W * 5, TILE_H * 1 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = STONE_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Overstone
		i = CELL_TYPE_OVERSTONE;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 2,
				TILE_W * 1, TILE_H * 2, TILE_W * 2, TILE_H * 2, TILE_W * 3,
				TILE_H * 2, TILE_W * 4, TILE_H * 2, TILE_W * 5, TILE_H * 2 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = OVERSTONE_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Sacredstone
		i = CELL_TYPE_SACREDSTONE;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 3,
				TILE_W * 1, TILE_H * 3, TILE_W * 2, TILE_H * 3, TILE_W * 3,
				TILE_H * 3, TILE_W * 4, TILE_H * 3, TILE_W * 5, TILE_H * 3 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SACREDSTONE_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Finalstone
		i = CELL_TYPE_FINALSTONE;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 4,
				TILE_W * 1, TILE_H * 4, TILE_W * 2, TILE_H * 4, TILE_W * 3,
				TILE_H * 4, TILE_W * 4, TILE_H * 4, TILE_W * 5, TILE_H * 4 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = FINALSTONE_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Sand
		i = CELL_TYPE_SAND;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 5,
				TILE_W * 1, TILE_H * 5, TILE_W * 2, TILE_H * 5, TILE_W * 3,
				TILE_H * 5, TILE_W * 4, TILE_H * 5, TILE_W * 5, TILE_H * 5 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Diamond Block
		i = CELL_TYPE_DIAMOND_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 6,
				TILE_W * 1, TILE_H * 6, TILE_W * 2, TILE_H * 6, TILE_W * 3,
				TILE_H * 6, TILE_W * 4, TILE_H * 6, TILE_W * 4, TILE_H * 6 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = 256;
		CELLS_LIGHT_SOURCE_G[i] = 320;
		CELLS_LIGHT_SOURCE_B[i] = 320;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Iron Block
		i = CELL_TYPE_IRON_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 7,
				TILE_W * 1, TILE_H * 7, TILE_W * 2, TILE_H * 7, TILE_W * 3,
				TILE_H * 7, TILE_W * 4, TILE_H * 7, TILE_W * 5, TILE_H * 7 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Gold Block
		i = CELL_TYPE_GOLD_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 8,
				TILE_W * 1, TILE_H * 8, TILE_W * 2, TILE_H * 8, TILE_W * 3,
				TILE_H * 8, TILE_W * 4, TILE_H * 8, TILE_W * 5, TILE_H * 8 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = 256;
		CELLS_LIGHT_SOURCE_G[i] = 256;
		CELLS_LIGHT_SOURCE_B[i] = 192;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Coal Block
		i = CELL_TYPE_COAL_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 9,
				TILE_W * 1, TILE_H * 9, TILE_W * 2, TILE_H * 9, TILE_W * 3,
				TILE_H * 9, TILE_W * 4, TILE_H * 9, TILE_W * 5, TILE_H * 9 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Copper Block
		i = CELL_TYPE_COPPER_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 10,
				TILE_W * 1, TILE_H * 10, TILE_W * 2, TILE_H * 10, TILE_W * 3,
				TILE_H * 10, TILE_W * 4, TILE_H * 10, TILE_W * 5, TILE_H * 10 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Tin Block
		i = CELL_TYPE_TIN_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 11,
				TILE_W * 1, TILE_H * 11, TILE_W * 2, TILE_H * 11, TILE_W * 3,
				TILE_H * 11, TILE_W * 4, TILE_H * 11, TILE_W * 5, TILE_H * 11 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Uranium Block
		i = CELL_TYPE_URANIUM_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 12,
				TILE_W * 1, TILE_H * 12, TILE_W * 2, TILE_H * 12, TILE_W * 3,
				TILE_H * 12, TILE_W * 4, TILE_H * 12, TILE_W * 5, TILE_H * 12 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = 256;
		CELLS_LIGHT_SOURCE_G[i] = 320;
		CELLS_LIGHT_SOURCE_B[i] = 256;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Graviton Block
		i = CELL_TYPE_GRAVITON_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 13,
				TILE_W * 1, TILE_H * 13, TILE_W * 2, TILE_H * 13, TILE_W * 3,
				TILE_H * 13, TILE_W * 4, TILE_H * 13, TILE_W * 4, TILE_H * 13 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = 384;
		CELLS_LIGHT_SOURCE_G[i] = 256;
		CELLS_LIGHT_SOURCE_B[i] = 320;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Dark Energy Block
		i = CELL_TYPE_DARK_ENERGY_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 14,
				TILE_W * 1, TILE_H * 14, TILE_W * 2, TILE_H * 14, TILE_W * 3,
				TILE_H * 14, TILE_W * 4, TILE_H * 14, TILE_W * 4, TILE_H * 14 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = 256;
		CELLS_LIGHT_SOURCE_G[i] = 320;
		CELLS_LIGHT_SOURCE_B[i] = 384;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Spatial Rift Block
		i = CELL_TYPE_SPATIAL_RIFT_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 15,
				TILE_W * 1, TILE_H * 15, TILE_W * 2, TILE_H * 15, TILE_W * 3,
				TILE_H * 15, TILE_W * 4, TILE_H * 15, TILE_W * 4, TILE_H * 15 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = 384;
		CELLS_LIGHT_SOURCE_G[i] = 320;
		CELLS_LIGHT_SOURCE_B[i] = 384;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Electron Block
		i = CELL_TYPE_ELECTRON_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 6, TILE_H * 0,
				TILE_W * 7, TILE_H * 0, TILE_W * 8, TILE_H * 0, TILE_W * 9,
				TILE_H * 0, TILE_W * 10, TILE_H * 0, TILE_W * 10, TILE_H * 0 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = 64;
		CELLS_LIGHT_SOURCE_G[i] = 192;
		CELLS_LIGHT_SOURCE_B[i] = 256;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Glass
		i = CELL_TYPE_GLASS;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 6, TILE_H * 1,
				TILE_W * 7, TILE_H * 1, TILE_W * 8, TILE_H * 1, TILE_W * 9,
				TILE_H * 1, TILE_W * 10, TILE_H * 1, TILE_W * 10, TILE_H * 1 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Silver Block
		i = CELL_TYPE_SILVER_BLOCK;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 6, TILE_H * 2,
				TILE_W * 7, TILE_H * 2, TILE_W * 8, TILE_H * 2, TILE_W * 9,
				TILE_H * 2, TILE_W * 10, TILE_H * 2, TILE_W * 11, TILE_H * 2 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Leaves
		i = CELL_TYPE_LEAVES;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 6, TILE_H * 3,
				TILE_W * 7, TILE_H * 3, TILE_W * 8, TILE_H * 3, TILE_W * 9,
				TILE_H * 3, TILE_W * 10, TILE_H * 3, TILE_W * 10, TILE_H * 3 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = LEAVES_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Wood
		i = CELL_TYPE_WOOD;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 6, TILE_H * 4,
				TILE_W * 7, TILE_H * 4, TILE_W * 8, TILE_H * 4, TILE_W * 9,
				TILE_H * 4, TILE_W * 10, TILE_H * 4, TILE_W * 11, TILE_H * 4 };
		CELLS_TILE_CORNER_FIX[i] = true;
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Sapling
		i = CELL_TYPE_SAPLING;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_TILE;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 15, TILE_H * 0 };
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_BOTTOM;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = AIR_LIGHT_RESISTANCE;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;
		CELLS_TICK[i] = true;

		// Lamp
		i = CELL_TYPE_LAMP;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_WALL;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 0, TILE_H * 4,
				TILE_W * 1, TILE_H * 4, TILE_W * 2, TILE_H * 4, TILE_W * 3,
				TILE_H * 4, TILE_W * 4, TILE_H * 4, TILE_W * 4, TILE_H * 4 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_ALL;
		CELLS_IS_DROPPABLE[i] = false;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SHELLABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_SOLID;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_SOLID;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_SOLID;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_SOLID;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_SOLID;
		CELLS_LIGHT_SOURCE_R[i] = CELL_LIGHT_SOURCE_MAGIC_R;
		CELLS_LIGHT_SOURCE_G[i] = CELL_LIGHT_SOURCE_MAGIC_G;
		CELLS_LIGHT_SOURCE_B[i] = CELL_LIGHT_SOURCE_MAGIC_B;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Tee
		i = CELL_TYPE_TEE;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_TEE;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 13, TILE_H * 0,
				TILE_W * 14, TILE_H * 0, TILE_W * 14, TILE_H * 0.25f };
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SQUARE[i] = false;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_TEE;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_TEE;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_TEE;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_TEE;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_TEE;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_TEE;
		CELLS_PHYSICS_COLLISION_TYPE[i] = CELL_PHYSICS_COLLISION_TYPE_TEE;
		CELLS_LIGHT_SOURCE_R[i] = CELL_LIGHT_SOURCE_TORCH_R * 0;
		CELLS_LIGHT_SOURCE_G[i] = CELL_LIGHT_SOURCE_TORCH_G * 0;
		CELLS_LIGHT_SOURCE_B[i] = CELL_LIGHT_SOURCE_TORCH_B * 0;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_NO;
		CELLS_IS_TEE[i] = true;
		
		// Tee Zombie
		i = CELL_TYPE_TEE_ZOMBIE;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_TEE;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 14, TILE_H * 1,
				TILE_W * 14.5f, TILE_H * 0, TILE_W * 14.5f, TILE_H * 0.25f };
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_SOLID[i] = true;
		CELLS_IS_SQUARE[i] = false;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_PHYSICS_TYPE[i] = CELL_PHYSICS_TYPE_WALL;
		CELLS_PHYSICS_BORDER_SIZE[i] = CELL_PHYSICS_BORDER_SIZE_TEE;
		CELLS_PHYSICS_CORNER_SIZE[i] = CELL_PHYSICS_CORNER_SIZE_TEE;
		CELLS_PHYSICS_CORNER_VALUE[i] = CELL_PHYSICS_CORNER_VALUE_TEE;
		CELLS_PHYSICS_DENSITY[i] = CELL_PHYSICS_DENSITY_TEE;
		CELLS_PHYSICS_FRICTION[i] = CELL_PHYSICS_FRICTION_TEE;
		CELLS_PHYSICS_RESTITUTION[i] = CELL_PHYSICS_RESTITUTION_TEE;
		CELLS_PHYSICS_COLLISION_TYPE[i] = CELL_PHYSICS_COLLISION_TYPE_TEE;
		CELLS_LIGHT_SOURCE_R[i] = CELL_LIGHT_SOURCE_TORCH_R * 0;
		CELLS_LIGHT_SOURCE_G[i] = CELL_LIGHT_SOURCE_TORCH_G * 0;
		CELLS_LIGHT_SOURCE_B[i] = CELL_LIGHT_SOURCE_TORCH_B * 0;
		CELLS_IS_DYNAMIC_LIGHT_SOURCE[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = SOLID_LIGHT_RESISTANCE;
		CELLS_AI_RESISTANCE[i] = CELL_AI_RESISTANCE_SOLID;
		CELLS_AI_DIAGONAL_RESISTANCE[i] = CELL_AI_DIAGONAL_RESISTANCE_SOLID;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_NO;
		CELLS_IS_TEE[i] = true;

		// UI
		i = CELL_TYPE_UI;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_UI;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 6, TILE_H * 5,
				TILE_W * 7, TILE_H * 5, TILE_W * 8, TILE_H * 5, TILE_W * 9,
				TILE_H * 5, TILE_W * 10, TILE_H * 5, TILE_W * 10, TILE_H * 5 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;

		// Hammer
		i = CELL_TYPE_HAMMER;
		CELLS_RENDER_WEAPON_TYPE[i] = CELL_RENDER_WEAPON_TYPE_SPECIAL;
		CELLS_RENDER_WEAPON_DATA[i] = new float[] { 2.0f, 1.0f, TILE_W * 12,
				TILE_H * 1, TILE_W * 2, TILE_H * 1 };
		CELLS_ITEM_ACTION[i] = CELL_ITEM_ACTION_HAMMER;

		// Grenade Gun
		i = CELL_TYPE_GRENADE_GUN;
		CELLS_RENDER_WEAPON_TYPE[i] = CELL_RENDER_WEAPON_TYPE_SPECIAL;
		CELLS_RENDER_WEAPON_DATA[i] = new float[] { 3.0f, 1.0f, TILE_W * 12,
				TILE_H * 2, TILE_W * 3, TILE_H * 1 };
		CELLS_ITEM_ACTION[i] = CELL_ITEM_ACTION_GUN;

		// Grass
		i = CELL_TYPE_GRASS;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_TILE;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 12, TILE_H * 0 };
		CELLS_CONNECTION_TYPE[i] = CELL_CONNECTION_TYPE_BOTTOM;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_IS_BLOCKING[i] = true;
		CELLS_LIGHT_RESISTANCE[i] = AIR_LIGHT_RESISTANCE;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_DEFAULT;

		// Inventory
		i = CELL_TYPE_INVENTORY;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_INVENTORY;
		CELLS_RENDER_TILE_DATA[i] = new float[] { TILE_W * 6, TILE_H * 6,
				TILE_W * 7, TILE_H * 6, TILE_W * 8, TILE_H * 6, TILE_W * 9,
				TILE_H * 6, TILE_W * 10, TILE_H * 6, TILE_W * 10, TILE_H * 6 };
		CELLS_TILE_CONNECTED_TYPE[i] = CELL_TILE_CONNECTED_TYPE_SAME;

		// Loot
		i = CELL_TYPE_LOOT;
		CELLS_RENDER_TYPE[i] = CELL_RENDER_TYPE_LOOT;
		CELLS_IS_DROPPABLE[i] = true;
		CELLS_DESTROY_ACTION[i] = CELL_DESTROY_ACTION_LOOT;
	}

	private Cells() {
	}

	// ===========================================================
	// Getter & Setter
	// ===========================================================

	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================

	// ===========================================================
	// Methods
	// ===========================================================

	public static int digitToSymbol(int pN) {
		return pN + 1;
	}

	public static int letterToSymbol(char pC) {
		return pC - 'a' + 11;
	}

	public static int charToSymbol(char pC) {
		if ('0' <= pC && pC <= '9')
			return pC - '0' + 1;
		if ('a' <= pC && pC <= 'z')
			return pC - 'a' + 11;
		return 0;
	}

	public static char symbolToChar(int pC) {
		if (pC == 0)
			return ' ';
		if (1 <= pC && pC <= 10)
			return (char) (pC - 1 + '0');
		if (11 <= pC && pC <= 36)
			return (char) (pC - 11 + 'a');
		return ' ';
	}

	// ===========================================================
	// Inner and Anonymous Classes
	// ===========================================================

}
